
pipeline {
    agent any
    environment {
        IMAGE_NAME = "java-sonarqube"
        ARTIFACT_REPO = "us-central1-docker.pkg.dev/sam-452209/my-docker-1"
        GOOGLE_APPLICATION_CREDENTIALS = credentials('gcp')
    }
    stages {
        stage("Docker Hub Connection") {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub', 
                                                  usernameVariable: 'DOCKER_USER', 
                                                  passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                    echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                    '''
                }
            }
        }

        stage("Google Cloud Login") {
            steps {
                sh '''
                gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
                gcloud auth configure-docker us-central1-docker.pkg.dev
                '''
            }
        }

        stage('Build & SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') { // Use the name configured in Jenkins settings
                    sh '''
                           mvn clean verify sonar:sonar \
                              -Dsonar.projectKey=java5 \
                              -Dsonar.projectName='java5' \
                              -Dsonar.host.url=http://35.208.183.106:9000 \
                              -Dsonar.token=squ_0a7bbd396615376a3b5bad329f2cc8902c2245ec
                    '''
                }
            }
        }

        stage("Quality Gate") {
            steps {
              timeout(time: 10, unit: 'MINUTES') {
                waitForQualityGate abortPipeline: true
              }
            }
          }


        stage("Run Docker Compose") {
            steps {
                sh '''
                docker build -t "${IMAGE_NAME}" .
                '''
            }
        }

        stage("Terraform Create Instance") {
            steps {
                sh '''
                terraform init
                terraform plan
                terraform apply --auto-approve
                '''
            }
        }

        stage("Docker Tags & Push (Python App)") {
            steps {
                sh '''
                docker tag ${IMAGE_NAME} ganesh6498/${IMAGE_NAME}:${BUILD_NUMBER}
                docker push ganesh6498/${IMAGE_NAME}:${BUILD_NUMBER}

                docker tag ${IMAGE_NAME} ${ARTIFACT_REPO}/${IMAGE_NAME}:${BUILD_NUMBER}
                docker push ${ARTIFACT_REPO}/${IMAGE_NAME}:${BUILD_NUMBER}
                '''
            }
        }

        stage("Check Connection") {
            steps {
                sh '''
                ansible-inventory --graph
                '''
            }
        }

        stage("Ping Ansible") {
            steps {
                sh '''
                sleep 10
                ansible all -m ping
                '''
            }
        }

        stage("Ansible Deployment") {
            steps {
                sh '''
                ansible-playbook ansible-java-sonarcude.yml -e build_number=$BUILD_NUMBER
                '''
            }
        }
    }
}

